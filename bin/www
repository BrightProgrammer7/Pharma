#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
const mongoose = require('mongoose');
const City = require('../models/City');
const Zone = require('../models/Zone');
const User = require('../models/User');
const Pharmacie = require('../models/Pharmacie');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
  // mongoose.connect('mongodb+srv://ay0ub:ayoub@cluster0.casrqv3.mongodb.net/citiesManagement?retryWrites=true&w=majority').then(result => {

mongoose.connect('mongodb+srv://admin:root@pharmamanagement.o0f7ixd.mongodb.net/?retryWrites=true&w=majority').then(result => {
  console.log('successfully connected');
   //const c = new City({
   // name: 'casablanca'
  // });
  // c.save().then(res => console.log('created city')).catch(err => console.log(err));

  //const zone = new Zone({
    //name: 'zone Casa',
     city:'casablanca'
   //});
   //zone.save().then(res => console.log('created zone')).catch(err => console.log(err));

   City.find().then(cities => console.log(cities)).catch(err => console.log(err));
   Zone.find().then(zones => console.log(zones)).catch(err => console.log(err));
   User.find().then(zones => console.log(zones)).catch(err => console.log(err));

   Zone.find().populate('city', 'name').find().then(zones => console.log(zones)).catch(err => console.log(err));

  // const ayoub = City.aggregate([
  //   {
  //     $lookup: {
  //       from: 'zones',
  //       localField: '_id',
  //       foreignField: 'city',
  //       as: 'zones',
  //     },
  //   },
  //   {
  //     $group: {
  //       _id: '$_id',
  //       name: { $first: '$name' },
  //       numberOfZones: { $sum: { $size: '$zones' } },
  //     },
  //   },
  // ]);
  // ayoub.exec().then(res => console.log(res));



  // .exec((err, zones) => {
  //   if (err) {
  //     console.error(err);
  //     return;
  //   }
  //   console.log(zones);
  // });
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}).catch(err => console.log(err));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
